
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000198  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000354  0800035c  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000354  08000354  0000135c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000354  08000354  0000135c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000354  0800035c  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000354  08000354  00001354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000358  08000358  00001358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000135c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000078  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000060  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00001468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000af5  00000000  00000000  000014dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000000c2  00000000  00000000  00001fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002ec5  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00004f59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000054  00000000  00000000  00004f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00004ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000000 	.word	0x20000000
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800033c 	.word	0x0800033c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000004 	.word	0x20000004
 80001f8:	0800033c 	.word	0x0800033c

080001fc <main>:
 * Code in assembly to turn on the Blue LED (User_LD2) located on PB7. This code configures the
 * MODER (to output), TYPER (to push-pull), SPEED (to low) and the PUPD (to disabled - no pull-up, pull-down).
 * It finally turns the GPIO PB7 on.
 */

int main (void) {
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	__asm__ volatile (
 8000200:	f241 004c 	movw	r0, #4172	@ 0x104c
 8000204:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8000208:	6801      	ldr	r1, [r0, #0]
 800020a:	f041 0102 	orr.w	r1, r1, #2
 800020e:	6001      	str	r1, [r0, #0]
 8000210:	481e      	ldr	r0, [pc, #120]	@ (800028c <main+0x90>)
 8000212:	f04f 0203 	mov.w	r2, #3
 8000216:	ea4f 3282 	mov.w	r2, r2, lsl #14
 800021a:	ea6f 0202 	mvn.w	r2, r2
 800021e:	6801      	ldr	r1, [r0, #0]
 8000220:	ea01 0102 	and.w	r1, r1, r2
 8000224:	f04f 0201 	mov.w	r2, #1
 8000228:	ea4f 3282 	mov.w	r2, r2, lsl #14
 800022c:	ea41 0102 	orr.w	r1, r1, r2
 8000230:	6001      	str	r1, [r0, #0]
 8000232:	4817      	ldr	r0, [pc, #92]	@ (8000290 <main+0x94>)
 8000234:	f04f 0203 	mov.w	r2, #3
 8000238:	ea4f 3282 	mov.w	r2, r2, lsl #14
 800023c:	ea6f 0202 	mvn.w	r2, r2
 8000240:	6801      	ldr	r1, [r0, #0]
 8000242:	ea01 0102 	and.w	r1, r1, r2
 8000246:	6001      	str	r1, [r0, #0]
 8000248:	4812      	ldr	r0, [pc, #72]	@ (8000294 <main+0x98>)
 800024a:	f04f 0203 	mov.w	r2, #3
 800024e:	ea4f 3282 	mov.w	r2, r2, lsl #14
 8000252:	ea6f 0202 	mvn.w	r2, r2
 8000256:	6801      	ldr	r1, [r0, #0]
 8000258:	ea01 0102 	and.w	r1, r1, r2
 800025c:	6001      	str	r1, [r0, #0]
 800025e:	480e      	ldr	r0, [pc, #56]	@ (8000298 <main+0x9c>)
 8000260:	f04f 0203 	mov.w	r2, #3
 8000264:	ea4f 3282 	mov.w	r2, r2, lsl #14
 8000268:	ea6f 0202 	mvn.w	r2, r2
 800026c:	6801      	ldr	r1, [r0, #0]
 800026e:	ea01 0102 	and.w	r1, r1, r2
 8000272:	6001      	str	r1, [r0, #0]
 8000274:	4809      	ldr	r0, [pc, #36]	@ (800029c <main+0xa0>)
 8000276:	f04f 0201 	mov.w	r2, #1
 800027a:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 800027e:	6801      	ldr	r1, [r0, #0]
 8000280:	ea41 0102 	orr.w	r1, r1, r2
 8000284:	6001      	str	r1, [r0, #0]
		"ORR R1, R1, R2\n\t"						// We use or to turn only PB7 on
		"STR R1, [R0]\n\t"							// Write the GPIOB_ODR
	);


	while (1);
 8000286:	bf00      	nop
 8000288:	e7fd      	b.n	8000286 <main+0x8a>
 800028a:	0000      	.short	0x0000
 800028c:	48000400 	.word	0x48000400
 8000290:	48000404 	.word	0x48000404
 8000294:	48000408 	.word	0x48000408
 8000298:	4800040c 	.word	0x4800040c
 800029c:	48000414 	.word	0x48000414

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	@ (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	@ (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	@ (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	@ (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	@ (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 f811 	bl	80002f4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002d2:	f7ff ff93 	bl	80001fc <main>

080002d6 <LoopForever>:

LoopForever:
  b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	0800035c 	.word	0x0800035c
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC1_IRQHandler>
	...

080002f4 <__libc_init_array>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	4d0d      	ldr	r5, [pc, #52]	@ (800032c <__libc_init_array+0x38>)
 80002f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000330 <__libc_init_array+0x3c>)
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	10a4      	asrs	r4, r4, #2
 80002fe:	2600      	movs	r6, #0
 8000300:	42a6      	cmp	r6, r4
 8000302:	d109      	bne.n	8000318 <__libc_init_array+0x24>
 8000304:	4d0b      	ldr	r5, [pc, #44]	@ (8000334 <__libc_init_array+0x40>)
 8000306:	4c0c      	ldr	r4, [pc, #48]	@ (8000338 <__libc_init_array+0x44>)
 8000308:	f000 f818 	bl	800033c <_init>
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	10a4      	asrs	r4, r4, #2
 8000310:	2600      	movs	r6, #0
 8000312:	42a6      	cmp	r6, r4
 8000314:	d105      	bne.n	8000322 <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	f855 3b04 	ldr.w	r3, [r5], #4
 800031c:	4798      	blx	r3
 800031e:	3601      	adds	r6, #1
 8000320:	e7ee      	b.n	8000300 <__libc_init_array+0xc>
 8000322:	f855 3b04 	ldr.w	r3, [r5], #4
 8000326:	4798      	blx	r3
 8000328:	3601      	adds	r6, #1
 800032a:	e7f2      	b.n	8000312 <__libc_init_array+0x1e>
 800032c:	08000354 	.word	0x08000354
 8000330:	08000354 	.word	0x08000354
 8000334:	08000354 	.word	0x08000354
 8000338:	08000358 	.word	0x08000358

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
